topolvm:
  # useLegacy -- If true, the legacy plugin name and legacy custom resource group is used(topolvm.cybozu.com).
  useLegacy: false

  podSecurityPolicy:
    create: false

  image:
    # image.repository -- TopoLVM image repository to use.
    repository: epgthirdpartyprod.azurecr.io/topolvm/topolvm-with-sidecar

    # image.tag -- TopoLVM image tag to use.
    # @default -- `{{ .Chart.AppVersion }}`
    #tag: "<override-value>"

    # image.pullPolicy -- TopoLVM image pullPolicy.
    pullPolicy:  # Always

    # image.pullSecrets -- List of imagePullSecrets.
    pullSecrets:
      - name: "container-registries-auth"

    csi:
      # image.csi.nodeDriverRegistrar -- Specify csi-node-driver-registrar: image.
      # If not specified, `ghcr.io/topolvm/topolvm-with-sidecar:{{ .Values.image.tag }}` will be used.
      nodeDriverRegistrar:  # registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.2.0

      # image.csi.csiProvisioner -- Specify csi-provisioner image.
      # If not specified, `ghcr.io/topolvm/topolvm-with-sidecar:{{ .Values.image.tag }}` will be used.
      csiProvisioner:  # registry.k8s.io/sig-storage/csi-provisioner:v2.2.1

      # image.csi.csiResizer -- Specify csi-resizer image.
      # If not specified, `ghcr.io/topolvm/topolvm-with-sidecar:{{ .Values.image.tag }}` will be used.
      csiResizer:  # registry.k8s.io/sig-storage/csi-resizer:v1.2.0

      # image.csi.csiSnapshotter -- Specify csi-snapshot image.
      # If not specified, `ghcr.io/topolvm/topolvm-with-sidecar:{{ .Values.image.tag }}` will be used.
      csiSnapshotter:  # registry.k8s.io/sig-storage/csi-snapshotter:v5.0.1

      # image.csi.livenessProbe -- Specify livenessprobe image.
      # If not specified, `ghcr.io/topolvm/topolvm-with-sidecar:{{ .Values.image.tag }}` will be used.
      livenessProbe:  # registry.k8s.io/sig-storage/livenessprobe:v2.3.0

  # A scheduler extender for TopoLVM
  scheduler:
    # scheduler.enabled --  If true, enable scheduler extender for TopoLVM
    enabled: false

  # lvmd service
  lvmd:
    # lvmd.managed -- If true, set up lvmd service with DaemonSet.
    managed: true

    # lvmd.socketName -- Specify socketName.
    socketName: /run/topolvm/lvmd.sock

    # lvmd.deviceClasses -- Specify the device-class settings.
    deviceClasses:
      - name: data-0
        volume-group: vg-data-0
        default: true
        spare-gb: 5

    # lvmd.lvcreateOptionClasses -- Specify the lvcreate-option-class settings.
    lvcreateOptionClasses: [ ]
    # - name: ssd
    #   options:
    #     - --type=raid1

    # lvmd.args -- Arguments to be passed to the command.
    args: [ ]

    # lvmd.priorityClassName -- Specify priorityClassName.
    priorityClassName:

    # lvmd.tolerations -- Specify tolerations.
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    tolerations: [ ]

    # lvmd.nodeSelector -- Specify nodeSelector.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    nodeSelector: { }

    # lvmd.affinity -- Specify affinity.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: { }

    # lvmd.volumes -- Specify volumes.
    volumes: [ ]
    #  - name: lvmd-socket-dir
    #    hostPath:
    #      path: /run/topolvm
    #      type: DirectoryOrCreate

    # lvmd.volumeMounts -- Specify volumeMounts.
    volumeMounts: [ ]
    #  - name: lvmd-socket-dir
    #    mountPath: /run/topolvm

    # lvmd.env -- extra environment variables
    env: [ ]
    #  - name: LVM_SYSTEM_DIR
    #    value: /tmp

    # lvmd.additionalConfigs -- Define additional LVM Daemon configs if you have additional types of nodes.
    # Please ensure nodeSelectors are non overlapping.
    additionalConfigs: [ ]
    #  - tolerations: []
    #      nodeSelector: {}
    #      device-classes:
    #        - name: ssd
    #          volume-group: myvg2
    #          default: true
    #          spare-gb: 10

    # lvmd.updateStrategy -- Specify updateStrategy.
    updateStrategy: { }
    #  type: RollingUpdate
    #  rollingUpdate:
    #    maxSurge: 50%
    #    maxUnavailable: 50%

    # lvmd.podLabels -- Additional labels to be set on the lvmd service pods.
    podLabels: { }
    # lvmd.labels -- Additional labels to be added to the Daemonset.
    labels: { }

    # lvmd.initContainers -- Additional initContainers for the lvmd service.
    initContainers: [ ]

  # CSI controller service
  controller:
    # controller.replicaCount -- Number of replicas for CSI controller service.
    replicaCount: 1

    # controller.args -- Arguments to be passed to the command.
    args: [ ]

    storageCapacityTracking:
      # controller.storageCapacityTracking.enabled -- Enable Storage Capacity Tracking for csi-provisioner.
      enabled: true

    securityContext:
      # controller.securityContext.enabled -- Enable securityContext.
      enabled: true

    nodeFinalize:
      # controller.nodeFinalize.skipped -- Skip automatic cleanup of PhysicalVolumeClaims when a Node is deleted.
      skipped: false

    prometheus:
      podMonitor:
        # controller.prometheus.podMonitor.enabled -- Set this to `true` to create PodMonitor for Prometheus operator.
        enabled: false

        # controller.prometheus.podMonitor.additionalLabels -- Additional labels that can be used so PodMonitor will be discovered by Prometheus.
        additionalLabels: { }

        # controller.prometheus.podMonitor.namespace -- Optional namespace in which to create PodMonitor.
        namespace: ""

        # controller.prometheus.podMonitor.interval -- Scrape interval. If not set, the Prometheus default scrape interval is used.
        interval: ""

        # controller.prometheus.podMonitor.scrapeTimeout -- Scrape timeout. If not set, the Prometheus default scrape timeout is used.
        scrapeTimeout: ""

        # controller.prometheus.podMonitor.relabelings -- RelabelConfigs to apply to samples before scraping.
        relabelings: [ ]
        # - sourceLabels: [__meta_kubernetes_service_label_cluster]
        #   targetLabel: cluster
        #   regex: (.*)
        #   replacement: ${1}
        #   action: replace

        # controller.prometheus.podMonitor.metricRelabelings -- MetricRelabelConfigs to apply to samples before ingestion.
        metricRelabelings: [ ]
        # - sourceLabels: [__meta_kubernetes_service_label_cluster]
        #   targetLabel: cluster
        #   regex: (.*)
        #   replacement: ${1}
        #   action: replace

    # controller.terminationGracePeriodSeconds -- (int) Specify terminationGracePeriodSeconds.
    terminationGracePeriodSeconds:  # 10

    # controller.priorityClassName -- Specify priorityClassName.
    priorityClassName:

    # controller.updateStrategy -- Specify updateStrategy.
    updateStrategy:
      type: Recreate          # for single node non-HA deployment
    #  type: RollingUpdate
    #  rollingUpdate:
    #    maxSurge: 50%
    #    maxUnavailable: 50%

    # controller.minReadySeconds -- (int) Specify minReadySeconds.
    minReadySeconds:  # 0

    # controller.affinity -- Specify affinity.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - controller
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - {{ include "topolvm.name" . }}
            topologyKey: kubernetes.io/hostname

    # controller.tolerations -- Specify tolerations.
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    tolerations: [ ]

    # controller.nodeSelector -- Specify nodeSelector.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    nodeSelector: { }

    # controller.volumes -- Specify volumes.
    volumes:
      - name: socket-dir
        emptyDir: { }

    podDisruptionBudget:
      # controller.podDisruptionBudget.enabled -- Specify podDisruptionBudget enabled.
      enabled: true

    # controller.podLabels -- Additional labels to be set on the controller pod.
    podLabels:
      prometheus: scrape-metrics
    # controller.labels -- Additional labels to be added to the Deployment.
    labels: { }

    # controller.initContainers -- Additional initContainers for the controller service.
    initContainers: [ ]

  node:
    podLabels:
      prometheus: scrape-metrics

  resources:
    # resources.topolvm_node -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    topolvm_node: { }
    #  requests:
    #    memory: 100Mi
    #    cpu: 100m
    #  limits:
    #    memory: 500Mi
    #    cpu: 500m
    # resources.csi_registrar -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    csi_registrar: { }
    # requests:
    #   cpu: "25m"
    #   memory: "10Mi"
    # limits:
    #   cpu: "200m"
    #   memory: "200Mi"
    # resources.liveness_probe -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    liveness_probe: { }
    # requests:
    #   cpu: "25m"
    #   memory: "10Mi"
    # limits:
    #   cpu: "200m"
    #   memory: "200Mi"
    # resources.topolvm_controller -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    topolvm_controller: { }
    #  requests:
    #    memory: "50Mi"
    #    cpu: "50m"
    #  limits:
    #    memory: "200Mi"
    #    cpu: "200m"
    # resources.csi_provisioner -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    csi_provisioner: { }
    #  requests:
    #    memory: "50Mi"
    #    cpu: "50m"
    #  limits:
    #    memory: "200Mi"
    #    cpu: "200m"
    # resources.csi_resizer -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    csi_resizer: { }
    #  requests:
    #    memory: "50Mi"
    #    cpu: "50m"
    #  limits:
    #    memory: "200Mi"
    #    cpu: "200m"
    # resources.csi_snapshotter -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    csi_snapshotter: { }
    #  requests:
    #    memory: "50Mi"
    #    cpu: "50m"
    #  limits:
    #    memory: "200Mi"
    #    cpu: "200m"
    # resources.lvmd -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    lvmd: { }
    #  requests:
    #    memory: 100Mi
    #    cpu: 100m
    #  limits:
    #    memory: 500Mi
    #    cpu: 500m
    # resources.topolvm_scheduler -- Specify resources.
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    topolvm_scheduler: { }
    #  requests:
    #    memory: "50Mi"
    #    cpu: "50m"
    #  limits:
    #    memory: "200Mi"
    #    cpu: "200m"

  env:
    # env.topolvm_node -- Specify environment variables for topolvm_node container.
    topolvm_node: [ ]
    # env.csi_registrar -- Specify environment variables for csi_registrar container.
    csi_registrar: [ ]
    # env.liveness_probe -- Specify environment variables for liveness_probe container.
    liveness_probe: [ ]
    # env.topolvm_controller -- Specify environment variables for topolvm_controller container.
    topolvm_controller: [ ]
    # env.csi_provisioner -- Specify environment variables for csi_provisioner container.
    csi_provisioner: [ ]
    # env.csi_resizer -- Specify environment variables for csi_resizer container.
    csi_resizer: [ ]
    # env.csi_snapshotter -- Specify environment variables for csi_snapshotter container.
    csi_snapshotter: [ ]
    # To specify environment variables for lvmd, use lvmd.env instead.
    # lvmd: []
    # env.topolvm_scheduler -- Specify environment variables for topolvm_scheduler container.
    topolvm_scheduler: [ ]

  livenessProbe:
    # livenessProbe.topolvm_node -- Specify resources.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    topolvm_node:
      failureThreshold:
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 60
    # livenessProbe.csi_registrar -- Specify livenessProbe.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    csi_registrar:
      failureThreshold:
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 60
    # livenessProbe.topolvm_controller -- Specify livenessProbe.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    topolvm_controller:
      failureThreshold:
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 60
    # livenessProbe.lvmd -- Specify livenessProbe.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    lvmd:
      failureThreshold:
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 60
    # livenessProbe.topolvm_scheduler -- Specify livenessProbe.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    topolvm_scheduler:
      failureThreshold:
      initialDelaySeconds: 10
      timeoutSeconds: 3
      periodSeconds: 60

  # storageClasses -- Whether to create storageclass(es)
  # ref: https://kubernetes.io/docs/concepts/storage/storage-classes/
  storageClasses:
    - name: topolvm-provisioner  # Defines name of storage class.
      storageClass:
        # Supported filesystems are: ext4, xfs, and btrfs.
        fsType: xfs
        # reclaimPolicy
        reclaimPolicy:  # Delete
        # Additional annotations
        annotations: { }
        # Default storage class for dynamic volume provisioning
        # ref: https://kubernetes.io/docs/concepts/storage/dynamic-provisioning
        isDefaultClass: true
        # volumeBindingMode can be either WaitForFirstConsumer or Immediate. WaitForFirstConsumer is recommended because TopoLVM cannot schedule pods wisely if volumeBindingMode is Immediate.
        volumeBindingMode: WaitForFirstConsumer
        # enables CSI drivers to expand volumes. This feature is available for Kubernetes 1.16 and later releases.
        allowVolumeExpansion: true
        additionalParameters:
          "topolvm.io/device-class": "data-0"

  webhook:
    # webhook.caBundle -- Specify the certificate to be used for AdmissionWebhook.
    caBundle:  # Base64-encoded, PEM-encoded CA certificate that signs the server certificate.
    # webhook.existingCertManagerIssuer -- Specify the cert-manager issuer to be used for AdmissionWebhook.
    existingCertManagerIssuer: { }
      # group: cert-manager.io
    # kind: Issuer
    # name: webhook-issuer
    podMutatingWebhook:
      # webhook.podMutatingWebhook.enabled -- Enable Pod MutatingWebhook.
      enabled: false
    pvcMutatingWebhook:
      # webhook.pvcMutatingWebhook.enabled -- Enable PVC MutatingWebhook.
      enabled: true

  # Container Security Context
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext:
    # securityContext.runAsUser -- Specify runAsUser.
    runAsUser: 10000
    # securityContext.runAsGroup -- Specify runAsGroup.
    runAsGroup: 10000

  cert-manager:
    # cert-manager.enabled -- Install cert-manager together.
    ## ref: https://cert-manager.io/docs/installation/kubernetes/#installing-with-helm
    enabled: false
    installCRDs: false

  priorityClass:
    # priorityClass.enabled -- Install priorityClass.
    enabled: true
    # priorityClass.name -- Specify priorityClass resource name.
    name: topolvm
    # priorityClass.value  -- Specify priorityClass value.
    value: 1000000

  snapshot:
    # snapshot.enabled -- Turn on the snapshot feature.
    enabled: false
